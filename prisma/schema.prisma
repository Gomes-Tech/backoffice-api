generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          String        @id @default(cuid())
  name        String
  email       String        @unique
  password    String
  photo       String?
  role        Role?         @relation(fields: [roleId], references: [id])
  roleId      String?
  isActive    Boolean       @default(true) @map("is_active")
  isDeleted   Boolean       @default(false) @map("is_deleted")
  createdAt   DateTime      @default(now()) @map("created_at")
  updatedAt   DateTime      @default(now()) @updatedAt @map("updated_at")
  banner      Banner[]
  category    Category[]
  subcategory Subcategory[]

  createdRoles         Role[]        @relation("UserCreatedRoles")
  updatedRoles         Role[]        @relation("UserUpdatedRoles")
  deletedRoles         Role[]        @relation("UserDeletedRoles")
  deletedBanners       Banner[]      @relation("UserDeletedBanners")
  updatedBanners       Banner[]      @relation("UserUpdatedBanners")
  updatedCategories    Category[]    @relation("UserUpdatedCategories")
  deletedCategories    Category[]    @relation("UserDeletedCategories")
  deletedSubCategories Subcategory[] @relation("UserDeletedSubCategories")
  updatedSubcategories Subcategory[] @relation("UserUpdatedSubCategories")

  @@map("users")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  users       User[]
  isActive    Boolean @default(true) @map("is_active")
  createdBy   User    @relation("UserCreatedRoles", fields: [createdById], references: [id])

  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedRoles", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedRoles", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("roles")
}

model Banner {
  id              String  @id @default(cuid())
  mobileImage     String
  desktopImage    String
  mobileImageAlt  String
  desktopImageAlt String
  link            String?
  isActive        Boolean @default(true) @map("is_active")

  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedBanners", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedBanners", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("banners")
}

model Category {
  id              String        @id @default(cuid())
  name            String        @unique
  slug            String        @unique
  isActive        Boolean       @default(true) @map("is_active")
  seoTitle        String?       @map("seo_title")
  seoDescription  String?       @map("seo_description")
  seoKeywords     String?       @map("seo_keywords")
  seoCanonicalUrl String?       @map("seo_canonical_url")
  seoMetaRobots   String?       @map("seo_meta_robots")
  subcategory     Subcategory[]

  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedCategories", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedCategories", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("categories")
}

model Subcategory {
  id              String   @id @default(cuid())
  name            String   @unique
  slug            String   @unique
  isActive        Boolean  @default(true) @map("is_active")
  seoTitle        String?  @map("seo_title")
  seoDescription  String?  @map("seo_description")
  seoKeywords     String?  @map("seo_keywords")
  seoCanonicalUrl String?  @map("seo_canonical_url")
  seoMetaRobots   String?  @map("seo_meta_robots")
  category        Category @relation(fields: [categoryId], references: [id])
  categoryId      String   @map("category_id")

  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedSubCategories", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedSubCategories", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("subcategories")
}

model seedStatus {
  id         String   @id @default(cuid())
  executedAt DateTime @default(now()) @map("executed_at")

  @@map("seed_status")
}
