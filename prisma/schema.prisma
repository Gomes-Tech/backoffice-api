generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  photo     String?
  role      Role?      @relation(fields: [roleId], references: [id])
  roleId    String?
  isActive  Boolean    @default(true) @map("is_active")
  isDeleted Boolean    @default(false) @map("is_deleted")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  banner    Banner[]
  category  Category[]
  // Product   Product[]

  createdRoles       Role[]        @relation("UserCreatedRoles")
  updatedRoles       Role[]        @relation("UserUpdatedRoles")
  deletedRoles       Role[]        @relation("UserDeletedRoles")
  deletedBanners     Banner[]      @relation("UserDeletedBanners")
  updatedBanners     Banner[]      @relation("UserUpdatedBanners")
  updatedCategories  Category[]    @relation("UserUpdatedCategories")
  deletedCategories  Category[]    @relation("UserDeletedCategories")
  // updatedProducts   Product[]  @relation("UserUpdatedProducts")
  // deletedProducts   Product[]  @relation("UserDeletedProducts")
  HeaderMenu         HeaderMenu[]
  updatedHeaderMenu  HeaderMenu[]  @relation("UserUpdatedHeaderMenu")
  deletedHeaderMenu  HeaderMenu[]  @relation("UserDeletedHeaderMenu")
  createdSocialMedia SocialMedia[] @relation("UserCreatedSocialMedia")
  updatedSocialMedia SocialMedia[] @relation("UserUpdatedSocialMedia")
  deletedSocialMedia SocialMedia[] @relation("UserDeletedSocialMedia")

  @@map("users")
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  users       User[]
  isActive    Boolean @default(true) @map("is_active")
  createdBy   User    @relation("UserCreatedRoles", fields: [createdById], references: [id])

  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedRoles", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedRoles", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("roles")
}

model Banner {
  id              String  @id @default(cuid())
  mobileImageUrl  String  @map("mobile_image_url")
  mobileImageAlt  String  @map("mobile_image_alt")
  mobileImageKey  String  @map("mobile_image_key")
  desktopImageUrl String  @map("desktop_image_url")
  desktopImageAlt String  @map("desktop_image_alt")
  desktopImageKey String  @map("desktop_image_key")
  name            String
  link            String?
  order           Int
  isActive        Boolean @default(true) @map("is_active")

  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedBanners", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedBanners", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("banners")
}

model HeaderMenu {
  id       String  @id @default(cuid())
  name     String  @unique
  link     String
  isActive Boolean @default(true) @map("is_active")
  order    Int     @unique

  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedHeaderMenu", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedHeaderMenu", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("header_menu")
}

model Category {
  id       String  @id @default(cuid())
  name     String  @unique
  slug     String  @unique
  isActive Boolean @default(true) @map("is_active")
  showMenu Boolean @default(false) @map("show_menu")

  seoTitle        String?    @map("seo_title")
  seoDescription  String?    @map("seo_description")
  seoKeywords     String?    @map("seo_keywords")
  seoCanonicalUrl String?    @map("seo_canonical_url")
  seoMetaRobots   String?    @map("seo_meta_robots")
  parentId        String?
  parent          Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryToParent")

  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedCategories", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedCategories", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("categories")
}

model SocialMedia {
  id       String  @id @default(cuid())
  name     String  @unique
  link     String
  order    Int     @unique
  isActive Boolean @default(true) @map("is_active")
  imageUrl String  @map("image_url")
  imageAlt String  @map("image_alt")
  imageKey String  @map("image_key")

  createdBy   User     @relation("UserCreatedSocialMedia", fields: [createdById], references: [id])
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedSocialMedia", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedSocialMedia", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("social_media")
}

// model Product {
//   id          String  @id @default(cuid())
//   name        String  @unique
//   slug        String  @unique
//   description String?
//   price       Int
//   isActive    Boolean @default(true) @map("is_active")

//   seoTitle        String? @map("seo_title")
//   seoDescription  String? @map("seo_description")
//   seoKeywords     String? @map("seo_keywords")
//   seoCanonicalUrl String? @map("seo_canonical_url")
//   seoMetaRobots   String? @map("seo_meta_robots")

//   createdBy   User     @relation(fields: [createdById], references: [id])
//   createdById String   @map("created_by")
//   createdAt   DateTime @default(now()) @map("created_at")
//   updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
//   updatedBy   User?    @relation("UserUpdatedProducts", fields: [updatedById], references: [id])
//   updatedById String?  @map("updated_by")
//   isDeleted   Boolean  @default(false) @map("is_deleted")
//   deletedBy   User?    @relation("UserDeletedProducts", fields: [deletedById], references: [id])
//   deletedById String?  @map("deleted_by")

//   @@map("products")
// }

model seedStatus {
  id         String   @id @default(cuid())
  executedAt DateTime @default(now()) @map("executed_at")

  @@map("seed_status")
}
