generator client {
  provider      = "prisma-client-js"
  binaryTargets = ["native", "linux-musl-openssl-3.0.x"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Customer {
  id        String    @id @default(cuid())
  name      String
  email     String    @unique
  password  String
  createdAt DateTime  @default(now()) @map("created_at")
  updatedAt DateTime  @default(now()) @updatedAt @map("updated_at")
  isDeleted Boolean   @default(false)
  deletedAt DateTime? @map("deleted_at")

  @@map("customers")
}

model User {
  id        String     @id @default(cuid())
  name      String
  email     String     @unique
  password  String
  photo     String?
  role      Role?      @relation(fields: [roleId], references: [id])
  roleId    String?
  isActive  Boolean    @default(true) @map("is_active")
  isDeleted Boolean    @default(false) @map("is_deleted")
  createdAt DateTime   @default(now()) @map("created_at")
  updatedAt DateTime   @default(now()) @updatedAt @map("updated_at")
  banner    Banner[]
  category  Category[]

  createdById  String? @map("created_by_id")
  createdBy    User?   @relation("UserCreatedBy", fields: [createdById], references: [id])
  createdUsers User[]  @relation("UserCreatedBy")

  createdRoles          Role[]           @relation("UserCreatedRoles")
  updatedRoles          Role[]           @relation("UserUpdatedRoles")
  deletedRoles          Role[]           @relation("UserDeletedRoles")
  deletedBanners        Banner[]         @relation("UserDeletedBanners")
  updatedBanners        Banner[]         @relation("UserUpdatedBanners")
  updatedCategories     Category[]       @relation("UserUpdatedCategories")
  deletedCategories     Category[]       @relation("UserDeletedCategories")
  createdProducts       Product[]        @relation("UserCreatedProducts")
  updatedProducts       Product[]        @relation("UserUpdatedProducts")
  deletedProducts       Product[]        @relation("UserDeletedProducts")
  HeaderMenu            HeaderMenu[]
  updatedHeaderMenu     HeaderMenu[]     @relation("UserUpdatedHeaderMenu")
  deletedHeaderMenu     HeaderMenu[]     @relation("UserDeletedHeaderMenu")
  createdSocialMedia    SocialMedia[]    @relation("UserCreatedSocialMedia")
  updatedSocialMedia    SocialMedia[]    @relation("UserUpdatedSocialMedia")
  deletedSocialMedia    SocialMedia[]    @relation("UserDeletedSocialMedia")
  createdAttributes     Attribute[]      @relation("UserCreatedAttributes")
  updatedAttribute      Attribute[]      @relation("UserUpdatedAttributes")
  deletedAttribute      Attribute[]      @relation("UserDeletedAttributes")
  createdAttributeValue AttributeValue[] @relation("UserCreatedAttributeValues")
  updatedAttributeValue AttributeValue[] @relation("UserUpdatedAttributeValues")
  deletedAttributeValue AttributeValue[] @relation("UserDeletedAttributeValues")
  createdFooterMenu     FooterMenu[]     @relation("UserCreatedFooterMenu")
  updatedFooterMenu     FooterMenu[]     @relation("UserUpdatedFooterMenu")
  deletedFooterMenu     FooterMenu[]     @relation("UserDeletedFooterMenu")

  @@map("users")
}

model PasswordResetToken {
  id        String   @id @default(uuid())
  token     String   @unique
  email     String
  used      Boolean  @default(false)
  expiresAt DateTime @map("expires_at")
  createdAt DateTime @default(now())
}

model Role {
  id          String  @id @default(cuid())
  name        String  @unique
  description String?
  users       User[]
  isActive    Boolean @default(true) @map("is_active")
  createdBy   User    @relation("UserCreatedRoles", fields: [createdById], references: [id])

  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedRoles", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedRoles", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("roles")
}

model Country {
  id        String   @id @default(cuid())
  name      String   @unique
  createdAt DateTime @default(now()) @map("created_at")
  State     State[]
}

model State {
  id        String   @id @default(cuid())
  name      String   @unique
  countryId String   @map("country_id")
  country   Country  @relation(fields: [countryId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
  City      City[]
}

model City {
  id        String   @id @default(cuid())
  name      String   @unique
  stateId   String   @map("state_id")
  state     State    @relation(fields: [stateId], references: [id])
  createdAt DateTime @default(now()) @map("created_at")
}

model SocialMedia {
  id             String  @id @default(cuid())
  name           String  @unique
  link           String
  order          Int     @unique
  isActive       Boolean @default(true) @map("is_active")
  headerImageUrl String  @map("header_image_url")
  headerImageAlt String  @map("header_image_alt")
  headerImageKey String  @map("header_image_key")
  footerImageUrl String  @map("footer_image_url")
  footerImageAlt String  @map("footer_image_alt")
  footerImageKey String  @map("footer_image_key")
  showFooter     Boolean @default(true)
  showHeader     Boolean @default(false)

  createdBy   User     @relation("UserCreatedSocialMedia", fields: [createdById], references: [id])
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedSocialMedia", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedSocialMedia", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("social_media")
}

model Banner {
  id              String    @id @default(cuid())
  mobileImageUrl  String    @map("mobile_image_url")
  mobileImageAlt  String    @map("mobile_image_alt")
  mobileImageKey  String    @map("mobile_image_key")
  desktopImageUrl String    @map("desktop_image_url")
  desktopImageAlt String    @map("desktop_image_alt")
  desktopImageKey String    @map("desktop_image_key")
  name            String
  link            String?
  order           Int
  isActive        Boolean   @default(true) @map("is_active")
  initialDate     DateTime? @map("initial_date")
  finishDate      DateTime? @map("finish_date")

  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedBanners", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedBanners", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("banners")
}

model HeaderMenu {
  id       String  @id @default(cuid())
  name     String  @unique
  link     String
  isActive Boolean @default(true) @map("is_active")
  order    Int     @unique

  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedHeaderMenu", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedHeaderMenu", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("header_menu")
}

model Category {
  id       String  @id @default(cuid())
  name     String  @unique
  slug     String  @unique
  isActive Boolean @default(true) @map("is_active")
  showMenu Boolean @default(false) @map("show_menu")

  seoTitle        String?    @map("seo_title")
  seoDescription  String?    @map("seo_description")
  seoKeywords     String?    @map("seo_keywords")
  seoCanonicalUrl String?    @map("seo_canonical_url")
  seoMetaRobots   String?    @map("seo_meta_robots")
  parentId        String?
  parent          Category?  @relation("CategoryToParent", fields: [parentId], references: [id])
  children        Category[] @relation("CategoryToParent")
  products        Product[]  @relation("ProductCategories")

  createdBy   User     @relation(fields: [createdById], references: [id])
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedCategories", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedCategories", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("categories")
}

model Product {
  id                String  @id @default(cuid())
  name              String  @unique
  slug              String  @unique
  description       String?
  isGreenSeal       Boolean @map("is_green_seal")
  freeShipping      Boolean @map("free_shipping")
  immediateShipping Boolean @map("immediate_shipping")
  isPersonalized    Boolean @map("is_personalized")
  isExclusive       Boolean @map("is_exclusive")
  inCutout          Boolean @map("in_cutout")

  seoTitle        String? @map("seo_title")
  seoDescription  String? @map("seo_description")
  seoKeywords     String? @map("seo_keywords")
  seoCanonicalUrl String? @map("seo_canonical_url")
  seoMetaRobots   String? @map("seo_meta_robots")

  categories      Category[]       @relation("ProductCategories")
  productVariants ProductVariant[]

  createdBy   User     @relation("UserCreatedProducts", fields: [createdById], references: [id])
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedProducts", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedProducts", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("products")
}

model ProductVariant {
  id                       String                         @id @default(cuid())
  price                    Int
  sku                      Int
  isActive                 Boolean                        @default(true) @map("is_active")
  discountPrice            String?                        @map("discount_price")
  discountPix              String?                        @map("discount_pix")
  stock                    Int?
  weight                   String
  length                   String
  width                    String
  height                   String
  barCode                  String?                        @map("bar_code")
  seoTitle                 String?                        @map("seo_title")
  seoDescription           String?                        @map("seo_description")
  seoKeywords              String?                        @map("seo_keywords")
  seoCanonicalUrl          String?                        @map("seo_canonical_url")
  seoMetaRobots            String?                        @map("seo_meta_robots")
  productVariantAttributes ProductVariantAttributeValue[]

  productId    String
  product      Product        @relation(fields: [productId], references: [id])
  productImage ProductImage[]
}

model ProductImage {
  id                String         @id @default(cuid())
  variant           ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId  String         @map("product_variant_id")
  desktopImageUrl   String         @map("desktop_image_url")
  desktopImageAlt   String         @map("desktop_image_alt")
  desktopImageKey   String         @map("desktop_image_key")
  mobileImageUrl    String         @map("mobile_image_url")
  mobileImageAlt    String         @map("mobile_image_alt")
  mobileImageKey    String         @map("mobile_image_key")
  desktopImageFirst Boolean        @map("desktop_image_first")
  mobileImageFirst  Boolean        @map("mobile_image_first")
  createdAt         DateTime       @default(now()) @map("created_at")
}

model ProductVariantAttributeValue {
  id               String         @id @default(cuid())
  productVariant   ProductVariant @relation(fields: [productVariantId], references: [id])
  productVariantId String         @map("product_variant_id")

  attributeValue   AttributeValue @relation(fields: [attributeValueId], references: [id])
  attributeValueId String         @map("attribute_value_id")

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@unique([productVariantId, attributeValueId])
  @@map("product_variant_attribute_value")
}

model Attribute {
  id     String           @id @default(cuid())
  name   String           @unique
  values AttributeValue[]

  createdBy   User     @relation("UserCreatedAttributes", fields: [createdById], references: [id])
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedAttributes", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedAttributes", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("attributes")
}

model AttributeValue {
  id              String                         @id @default(cuid())
  name            String                         @unique
  value           String                         @unique
  attributeId     String                         @map("attribute_id")
  attribute       Attribute                      @relation(fields: [attributeId], references: [id])
  productVariants ProductVariantAttributeValue[]

  createdBy   User     @relation("UserCreatedAttributeValues", fields: [createdById], references: [id])
  createdById String   @map("created_by")
  createdAt   DateTime @default(now()) @map("created_at")
  updatedAt   DateTime @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?    @relation("UserUpdatedAttributeValues", fields: [updatedById], references: [id])
  updatedById String?  @map("updated_by")
  isDeleted   Boolean  @default(false) @map("is_deleted")
  deletedBy   User?    @relation("UserDeletedAttributeValues", fields: [deletedById], references: [id])
  deletedById String?  @map("deleted_by")

  @@map("attribute_value")
}

model FooterMenu {
  id          String           @id @default(cuid())
  name        String
  items       FooterMenuItem[]
  isActive    Boolean
  createdBy   User             @relation("UserCreatedFooterMenu", fields: [createdById], references: [id])
  createdById String           @map("created_by")
  createdAt   DateTime         @default(now()) @map("created_at")
  updatedAt   DateTime         @default(now()) @updatedAt @map("updated_at")
  updatedBy   User?            @relation("UserUpdatedFooterMenu", fields: [updatedById], references: [id])
  updatedById String?          @map("updated_by")
  isDeleted   Boolean          @default(false) @map("is_deleted")
  deletedBy   User?            @relation("UserDeletedFooterMenu", fields: [deletedById], references: [id])
  deletedById String?          @map("deleted_by")

  @@map("footer_menu")
}

model FooterMenuItem {
  id          String  @id @default(cuid())
  type        String
  url         String?
  imageUrl    String?
  imageAlt    String?
  imageKey    String?
  imageWidth  String?
  imageHeight String?
  content     String?

  footerMenu   FooterMenu @relation(fields: [footerMenuId], references: [id])
  footerMenuId String

  createdAt DateTime @default(now()) @map("created_at")
  updatedAt DateTime @default(now()) @updatedAt @map("updated_at")

  @@index([footerMenuId])
  @@map("footer_menu_item")
}

model seedStatus {
  id         String   @id @default(cuid())
  executedAt DateTime @default(now()) @map("executed_at")

  @@map("seed_status")
}
